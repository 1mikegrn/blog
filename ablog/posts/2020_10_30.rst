.. post:: 30 Oct, 2020
   :tags: Python, Generators
   :category: Iterators
   :author: Michael Green
   :location: California, United States

===================
Yielding Generators
===================

.. image:: ../images/generator.jpg

In our `previous <https://1mikegrn.github.io/blog/posts/2020_10_23/>`_ blog post, we spent some time discussing the iterator protocol and how we can build custom objects which hook into the :code:`for` loop syntax of the Python programming language. Today, we're going to continue discussing iterators by looking into a specific sub-class of these objects, called *generators*. We'll see how generators provide us convenience and flexibility when it comes to hooking into the iterator protocol.

Generators: :code:`__next__()` vs :code:`yield`
-----------------------------------------------

Like iterators, generators use the iterator protocol for iteratively yielding method and function results. The difference between the two objects however is in their construction. Instead of creating a :code:`__next__()` method in a class, we only need to call :code:`yield` in place of a typical :code:`return` call so to create a generator. This simplified syntax allows us to apply the iterator protocol to both class methods and functions with a high degree of flexibility.

As a simple example, let's go ahead and look at the :code:`CountByTwos` object we created last week and refactor it into a generator. To recap, our :code:`CountByTwos` object hooked into the iterator protocol by instantiating the methods :code:`__iter__()` and :code:`___next__()`.

.. code-block:: python

   class CountByTwos:
      def __init__(self, start, stop):
         self.internal_value = start
         self.stop = stop

      def __iter__(self):
         return self

      def __next__(self):
         snapshot = self.internal_value
         if snapshot >= self.stop:
               raise StopIteration
         self.internal_value += 2
         return snapshot

.. code-block:: general

   In [1]: [x for x in CountByTwos(start=4, stop=24)]
   Out[1]: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22]

With generators, we hook into this same protocol. However, the methods :code:`__iter__()` and :code:`___next__()` instead map to the generator's instantiation and the keyword :code:`yield`. So as a generator function, we can refactor :code:`CountByTwos` to the following.

.. code-block:: python

   def count_by_twos(start, stop):
      internal_value = start
      while True:
         yield internal_value
         internal_value += 2
         if internal_value >= stop:
               return StopIteration

.. code-block:: general

   In [2]: [x for x in count_by_twos(start=4, stop=24)]
   Out[2]: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22]

As we can see, the generator function and the Iterator class object contain many of the same ideas. They're both instantiated, they both can be called via :code:`next(obj)`/:code:`obj.__next__()`, and they both iteratively return results to the user until a :code:`StopIteration` is encountered.

.. code-block:: general

   In [3]: a, b = (
      CountByTwos(start=4,stop=8), 
      count_by_twos(start=4,stop=8)
   )

   In [4]: next(a), next(b)
   Out[4]: (4, 4)

   In [5]: a.__next__(), b.__next__()
   Out[5]: (6, 6)

   In [6]: next(a)
   Out[6]: StopIteration                             
   Traceback (most recent call last)
   <ipython-input-28-15841f3f11d4> in <module>
   ----> 1 next(a)

   D:\Programming\ZZ_Sandbox\file_iterator.py in __next__(self)
       146         snapshot = self.internal_value
       147         if snapshot >= self.stop:
   --> 148             raise StopIteration
       149         self.internal_value += 2
       150         return snapshot

   StopIteration:

   In [7]: next(b)
   Out[7]: StopIteration                             
   Traceback (most recent call last)
   <ipython-input-29-adb3e17b0219> in <module>
   ----> 1 next(b)

   StopIteration:

With generators, the :code:`StopIteration` can be passed implicitly by finishing all :code:`yield` statements. Once the generator executes all it's containing yield statements, a subsequent :code:`next()` call will return the :code:`StopIteration` and either error out or exit the :code:`for` loop protocol.

.. code-block:: python

   def count_by_twos(start, stop):
      internal_value = start
      while internal_value < stop:
         yield internal_value
         internal_value += 2

.. code-block:: general

   In [8]: [x for x in count_by_twos(start=4, stop=24)]
   Out[8]: [4, 6, 8, 10, 12, 14, 16, 18, 20, 22]

Example: CSV concatenation (part 2)
-----------------------------------

As a core library developer, I'm always looking for ease-of-use optimizations that allow the tools I develop to be used as seamlessly as possible. From last week's blog, we created a set of objects that would allow a user to concatenate a set of CSV files into a single CSV file. The protocol for using these objects looked like the following, where we successively called each iterator within nested for loops so to write the CSV contents line-by-line to the resulting file.

.. code-block:: python

   with open(r'D:\Programming\ZZ_Sandbox\file_iterator\test.txt', 'w') as f:
      for file in FileManager.from_directory(
         r'D:\Programming\ZZ_Sandbox\file_iterator', '.csv'
      ):
         for row in file:
               f.write(row)

Now, the result here is perfectly functional. However, from a user experience perspective, the interface is rather clunky. Having to interact with two objects here in this explicit manner so to accomplish a single task in my opinion is undesirable. We can make use of the more flexible generator paradigm so to wrap the functionality of the :code:`FileIterator` into a class method of the File Manager.

.. code-block:: python

   import glob
   import os.path


   class CSVcat:
      def __init__(self, files: list) -> None:
         self.files = files
         with open(self.files[0]) as f:
               self.headers = f.readline()
         self.file_generator = self._file_generator()

      def __iter__(self):
         return self

      def __next__(self):
         return next(self.file_generator)

      def _file_generator(self) -> str:
         yield self.headers
         for file in self.files:
               f = open(file)
               next(f)
               for row in f:
                  yield row

      @staticmethod
      def from_directory(file_dir: str, ext: str) -> 'CSVcat':
         return CSVcat(glob.glob(os.path.join(file_dir, "**"+ext)))

With this new object, we've wrapped the functionality of the FileIterator into a generator method. We're using the :code:`__init__()` method of this new :code:`CSVcat` object to instantiate the generator method within the class instance, as well as extract the header information from one of the files. :code:`CSVcat.__next__()` calls the generator's :code:`__next__()` method, which iteratively calls the generator as :code:`CSVcat` is iterated over. With the added flexibility provided by the :code:`yield` keyword, we can fluently handle yielding the :code:`self.headers` row, as well yielding only the data rows as the list of files is iterated over. The result of this is that we can execute the entire protocol in a single for loop.

.. code-block:: python

   with open(r'D:\Programming\ZZ_Sandbox\file_iterator\test.txt', 'w') as f:
      for row in CSVcat.from_directory(r'D:\Programming\ZZ_Sandbox\file_iterator', '.csv'):
         f.write(row)

Summary
-------

The iterator protocol is a powerful tool that Python developers can leverage for efficient data processing. Both iterators and generators provide us with a set of unique means for customizing our solutions. Here, we've used both models to hook into the :code:`for` loop syntax of Python, allowing us to fluently process a high volume of data without having to worry about memory overload.

|
|
|

.. note::

   *If you enjoyed this post, be sure to* `follow <https://www.linkedin.com/in/1mikegrn/>`_ *me on LinkedIn, where I'll be posting more content regularly. You can find previous content at my blog's website,* `1mikegrn.github.io/blog <https://1mikegrn.github.io/blog>`_