<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://lernfunk.de/media/654321</id>
  <title>Michael's Blog</title>
  <updated>2020-10-30T15:00:58.140139+00:00</updated>
  <link href="https://1mikegrn.github.io/blog"/>
  <link href="https://1mikegrn.github.io/blog/blog/atom.xml"/>
  <generator uri="https://ablog.readthedocs.org" version="0.10.11">ABlog</generator>
  <entry>
    <id>https://1mikegrn.github.io/blog/posts/2020_9_6/</id>
    <title>In Python, decorators are where it’s @</title>
    <updated>2020-09-06T00:00:00-07:00</updated>
    <author>
      <name>Michael Green</name>
    </author>
    <content type="html">&lt;p&gt;The title of this post is a bit over hyped, predominately due to the fact that decorators fundamentally don’t add any extra functionality to the Python programming language. They do however provide an elegant protocol for a design pattern that occurs very often in Python. In this post, I’ll show you what that design pattern is, and how to use decorators for providing an elegant solution to these pattern instances.&lt;/p&gt;
</content>
    <link href="https://1mikegrn.github.io/blog/posts/2020_9_6/" rel="alternate"/>
    <published>2020-09-06T00:00:00-07:00</published>
  </entry>
  <entry>
    <id>https://1mikegrn.github.io/blog/posts/2020_10_16/</id>
    <title>Python’s “with” keyword - in context</title>
    <updated>2020-10-16T00:00:00-07:00</updated>
    <author>
      <name>Michael Green</name>
    </author>
    <content type="html">&lt;p&gt;In Python, everything is an object. To some this may be a tad cliche to repeat, but underneath this rather innocuous statement lies a paradigm that is indicative of every object that developers interact with in the Python programming language. This paradigm is the Python data model.&lt;/p&gt;
</content>
    <link href="https://1mikegrn.github.io/blog/posts/2020_10_16/" rel="alternate"/>
    <published>2020-10-16T00:00:00-07:00</published>
  </entry>
  <entry>
    <id>https://1mikegrn.github.io/blog/posts/2020_10_23/</id>
    <title>Iterating right along…</title>
    <updated>2020-10-23T00:00:00-07:00</updated>
    <author>
      <name>Michael Green</name>
    </author>
    <content type="html">&lt;p&gt;Over the last few blog posts we’ve taken the time to discuss how to create various objects within the scope of the Python data model. To reiterate, the Python data model is a set of hooks which allow developers to construct objects which interact with some of the core functionality of the Python programming language. We’ve previously looked at how to build &lt;code class="code docutils literal notranslate"&gt;&lt;span class="pre"&gt;__enter__()&lt;/span&gt;&lt;/code&gt; and &lt;code class="code docutils literal notranslate"&gt;&lt;span class="pre"&gt;__exit__()&lt;/span&gt;&lt;/code&gt; strategies for use in context managers.&lt;/p&gt;
</content>
    <link href="https://1mikegrn.github.io/blog/posts/2020_10_23/" rel="alternate"/>
    <published>2020-10-23T00:00:00-07:00</published>
  </entry>
  <entry>
    <id>https://1mikegrn.github.io/blog/posts/2020_10_30/</id>
    <title>Yielding Generators</title>
    <updated>2020-10-30T00:00:00-07:00</updated>
    <author>
      <name>Michael Green</name>
    </author>
    <content type="html">&lt;p&gt;In our &lt;a class="reference external" href="https://1mikegrn.github.io/blog/posts/2020_10_23/"&gt;previous&lt;/a&gt; blog post, we spent some time discussing the iterator protocol and how we can build custom objects which hook into the &lt;code class="code docutils literal notranslate"&gt;&lt;span class="pre"&gt;for&lt;/span&gt;&lt;/code&gt; loop syntax of the Python programming language. Today, we’re going to continue discussing iterators by looking into a specific sub-class of these objects, called &lt;em&gt;generators&lt;/em&gt;. We’ll see how generators provide us convienience and flexibility when it comes to hooking into the iterator protocol.&lt;/p&gt;
</content>
    <link href="https://1mikegrn.github.io/blog/posts/2020_10_30/" rel="alternate"/>
    <published>2020-10-30T00:00:00-07:00</published>
  </entry>
</feed>
